name: DevOps Todo - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  EKS_CLUSTER_NAME: devops-todo-cluster
  ECR_REPOSITORY: devops-todo
  KUBE_NAMESPACE: devops-todo

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        run: |
          cd app
          npm ci

      - name: Run tests
        run: |
          cd app
          npm test

      - name: Lint code
        run: |
          cd app
          echo "‚úÖ Code linting passed (placeholder)"

      - name: Check application startup
        run: |
          cd app
          timeout 10s npm start || echo "‚úÖ Application can start (timeout expected)"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'
        continue-on-error: true

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
        continue-on-error: true

  deploy-to-aws:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if EKS cluster exists
        id: check-cluster
        run: |
          if aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "cluster-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ EKS cluster exists"
          else
            echo "cluster-exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå EKS cluster does not exist"
          fi

      - name: Skip deployment if cluster doesn't exist
        if: steps.check-cluster.outputs.cluster-exists == 'false'
        run: |
          echo "‚ö†Ô∏è EKS cluster '${{ env.EKS_CLUSTER_NAME }}' does not exist."
          echo "Please run Terraform to create the infrastructure first:"
          echo "  cd terraform && terraform init && terraform apply"
          echo "Skipping deployment for now."
          exit 0

      - name: Login to Amazon ECR
        if: steps.check-cluster.outputs.cluster-exists == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install and configure kubectl
        if: steps.check-cluster.outputs.cluster-exists == 'true'
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Install Helm
        if: steps.check-cluster.outputs.cluster-exists == 'true'
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Install AWS Load Balancer Controller
        if: steps.check-cluster.outputs.cluster-exists == 'true'
        run: |
          # Check if AWS Load Balancer Controller is already installed
          if ! helm list -n kube-system | grep -q aws-load-balancer-controller; then
            echo "Installing AWS Load Balancer Controller..."
            helm repo add eks https://aws.github.io/eks-charts
            helm repo update
            
            # Get OIDC issuer URL
            OIDC_ISSUER=$(aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query "cluster.identity.oidc.issuer" --output text)
            
            # Install with basic configuration
            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
              -n kube-system \
              --set clusterName=${{ env.EKS_CLUSTER_NAME }} \
              --set serviceAccount.create=true \
              --set serviceAccount.name=aws-load-balancer-controller \
              --wait --timeout=300s
          else
            echo "AWS Load Balancer Controller already installed"
          fi

      - name: Deploy to EKS
        if: steps.check-cluster.outputs.cluster-exists == 'true'
        run: |
          # Update image in deployment
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          
          # Update deployment with new image
          sed -i "s|YOUR_DOCKERHUB_USERNAME/devops-todo:latest|$IMAGE_URI|g" k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/hpa.yaml
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/devops-todo -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

      - name: Verify deployment
        if: steps.check-cluster.outputs.cluster-exists == 'true'
        run: |
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
          kubectl get services -n ${{ env.KUBE_NAMESPACE }}
          kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}
          
          # Get application URL (may take time for ALB to be ready)
          echo "Waiting for ALB to be provisioned..."
          sleep 120
          ALB_URL=$(kubectl get ingress devops-todo-ingress -n ${{ env.KUBE_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
          
          if [ -n "$ALB_URL" ]; then
            echo "üåê Application URL: http://$ALB_URL"
            echo "üîç Health check: http://$ALB_URL/health"
            echo "üìä Statistics: http://$ALB_URL/stats"
          else
            echo "‚ö†Ô∏è ALB URL not ready yet. Check later with: kubectl get ingress -n ${{ env.KUBE_NAMESPACE }}"
          fi

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ steps.check-cluster.outputs.cluster-exists }}" == "true" ]; then
            if [ "${{ job.status }}" == "success" ]; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Deployment failed!"
            fi
          else
            echo "‚ÑπÔ∏è Deployment skipped - EKS cluster not found"
          fi

  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    needs: deploy-to-aws
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete old ECR images
        run: |
          # Keep only the latest 10 images
          aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'sort_by(imageDetails,& imageDigest)[:-10].imageDigest' \
            --output text | tr '\t' '\n' | \
          while read digest; do
            if [ ! -z "$digest" ]; then
              echo "Deleting image with digest: $digest"
              aws ecr batch-delete-image --repository-name ${{ env.ECR_REPOSITORY }} \
                --image-ids imageDigest=$digest || true
            fi
          done
